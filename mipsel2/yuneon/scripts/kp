#!/bin/sh /etc/rc.common

START=99
STOP=

SERVICE_USE_PID=1
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1

. /lib/functions.sh

config_load "yuneon" &>/dev/null
config_get MIWIFIPATH miwifiplus path &>/dev/null
config_get ENABLED kp enabled &>/dev/null
config_get HTTPSMODE kp https &>/dev/null
config_get FILTERMODE kp fltype &>/dev/null
config_get EXTPORT kp extport &>/dev/null
config_get DEVICEMODE kp dev_enable &>/dev/null
config_get ALLOWMACS kp mac &>/dev/null
config_get LOCALPORT kp lport &>/dev/null

MODEL=$(cat /proc/xiaoqiang/model)
IPSETFILE_PATH="$MIWIFIPATH/ipset"
WANIP=`ubus call network.interface.wan status | grep \"address\" | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'`

createRuleIpset(){
	[ $(ipset list ad_list 2>/dev/null|wc -l) -ge 1 ] || ipset -N ad_list iphash
	[ $(ipset list ad_lan_dst_drop 2>/dev/null|wc -l) -ge 1 ] || {
		ipset -N ad_lan_dst_drop nethash
		ipset add ad_lan_dst_drop 0.0.0.0/8
		ipset add ad_lan_dst_drop 10.0.0.0/8
		ipset add ad_lan_dst_drop 100.64.0.0/10
		ipset add ad_lan_dst_drop 127.0.0.0/8
		ipset add ad_lan_dst_drop 169.254.0.0/16
		ipset add ad_lan_dst_drop 172.16.0.0/12
		ipset add ad_lan_dst_drop 192.0.0.0/24
		ipset add ad_lan_dst_drop 192.0.2.0/24
		ipset add ad_lan_dst_drop 192.25.61.0/24
		ipset add ad_lan_dst_drop 192.31.196.0/24
		ipset add ad_lan_dst_drop 192.52.193.0/24
		ipset add ad_lan_dst_drop 192.88.99.0/24
		ipset add ad_lan_dst_drop 192.168.0.0/16
		ipset add ad_lan_dst_drop 192.175.48.0/24
		ipset add ad_lan_dst_drop 198.18.0.0/15
		ipset add ad_lan_dst_drop 198.51.100.0/24
		ipset add ad_lan_dst_drop 203.0.113.0/24
		ipset add ad_lan_dst_drop 224.0.0.0/4
		ipset add ad_lan_dst_drop 240.0.0.0/4
		ipset add ad_lan_dst_drop 255.255.255.255
		ipset add ad_lan_dst_drop $WANIP
	}
	[ $(ipset list ad_lan_src_drop 2>/dev/null|wc -l) -ge 1 ] || ipset -N ad_lan_src_drop iphash
	ipset add ad_lan_src_drop 127.0.0.1
	ipset add ad_lan_src_drop $(uci get network.lan.ipaddr)
	[ "$MODEL" = "R3P" ] || {
		[ $(ipset list ad_port_dst_forward 2>/dev/null|wc -l) -ge 1 ] || ipset -N ad_port_dst_forward bitmap:port range 0-65535
		[ $EXTPORT -eq 1 ] && {
			local ports=$(cat $MIWIFIPATH/bin/kp/kp_hookport.txt 2>/dev/null|sed 's/|$//')
			[ -z $ports ] && {
				ipset add ad_port_dst_forward 80
				ipset add ad_port_dst_forward 443
				ipset add ad_port_dst_forward 8080
			} || {
				OLD_IFS="$IFS"
				IFS="|"
				for port in $ports
				do 
					ipset add ad_port_dst_forward $port
				done
				IFS="$OLD_IFS"
			}
		}||{
			ipset add ad_port_dst_forward 80
			ipset add ad_port_dst_forward 443
			ipset add ad_port_dst_forward 8080
		}
		[ $HTTPSMODE -ne 1 ] && {
			ipset del ad_port_dst_forward 443
		}
	}
}
destroyRuleIpset(){
	[ $(ipset list ad_lan_dst_drop 2>/dev/null|wc -l) -gt 0 ] && ipset destroy ad_lan_dst_drop
	[ $(ipset list ad_lan_src_drop 2>/dev/null|wc -l) -gt 0 ] && ipset destroy ad_lan_src_drop
	[ "$MODEL" = "R3P" ] || {
		[ $(ipset list ad_port_dst_forward 2>/dev/null|wc -l) -gt 0 ] && ipset destroy ad_port_dst_forward
	}
	[ $(ipset list ad_list 2>/dev/null|wc -l) -gt 0 ] && ipset destroy ad_list
}

createRuleFile(){
	[ -z "$(ls $MIWIFIPATH/bin/kp/kp_ipset.txt 2>/dev/null)" ] && cp -rf $IPSETFILE_PATH/ad_list.conf $MIWIFIPATH/bin/kp/kp_ipset.txt
}

destroyRuleFile(){
	[ -z /etc/dnsmasq.d/ad_list.conf ] || rm -rf /etc/dnsmasq.d/ad_list.conf
	[ -z /tmp/etc/dnsmasq.d/ad_list.conf ] || rm -rf /tmp/etc/dnsmasq.d/ad_list.conf
}

createRuleTable()
{
	[ $(iptables -t nat -L|grep -c 'Chain AD_RULE_FORWARD') -gt 0 ] || iptables -t nat -N AD_RULE_FORWARD
	iptables -t nat -A AD_RULE_FORWARD -m set --match-set ad_lan_dst_drop dst -j RETURN
	iptables -t nat -A AD_RULE_FORWARD -m set --match-set ad_lan_src_drop src -j RETURN
		
	case $FILTERMODE in
	1 )
		ln -sf $MIWIFIPATH/bin/kp/kp_ipset.txt /etc/dnsmasq.d/ad_list.conf
		iptables -t nat -A AD_RULE_FORWARD -p tcp -m set --match-set ad_list dst -j REDIRECT --to-port $LOCALPORT
	;;
	2 )
		ln -sf $IPSETFILE_PATH/video_list.conf /etc/dnsmasq.d/ad_list.conf
		iptables -t nat -A AD_RULE_FORWARD -p tcp -m set --match-set ad_list dst -j REDIRECT --to-port $LOCALPORT
	;;
	* )
		iptables -t nat -A AD_RULE_FORWARD -p tcp -j REDIRECT --to-port $LOCALPORT
	;;
	esac
	
	[ $(iptables -t nat -L|grep -c 'Chain AD_RULE_ENTRY') -gt 0 ] || iptables -t nat -N AD_RULE_ENTRY
	if [ $DEVICEMODE -eq 1 ]
	then
		for mac in $ALLOWMACS
		do
			iptables -t nat -A AD_RULE_ENTRY -p tcp -m mac --mac-source $mac -j AD_RULE_FORWARD
		done
	else
		iptables -t nat -A AD_RULE_ENTRY -p tcp -j AD_RULE_FORWARD
	fi
	[ "$MODEL" = "R3P" ] && {
		[ $HTTPSMODE -eq 1 ] && {
			iptables -t nat -A PREROUTING -p tcp -m multiport --dport 80,8080,443 -j AD_RULE_ENTRY
		} || {
			iptables -t nat -A PREROUTING -p tcp -m multiport --dport 80,8080 -j AD_RULE_ENTRY
		}
	} || {
		iptables -t nat -A PREROUTING -p tcp -m set --match-set ad_port_dst_forward dst -j AD_RULE_ENTRY
	}
}

destroyRuleTable()
{
	while [ $(iptables -t nat -L PREROUTING|grep -c AD_RULE_ENTRY) -gt 0 ]
	do
		iptables -t nat -L PREROUTING --line-number|grep AD_RULE_ENTRY|cut -d ' ' -f1|xargs iptables -t nat -D PREROUTING
	done
	
	while [ $(iptables -t nat -L AD_RULE_ENTRY 2>/dev/null|wc -l) -gt 0 ]
	do
		iptables -t nat -F AD_RULE_ENTRY
		iptables -t nat -X AD_RULE_ENTRY
	done

	while [ $(iptables -t nat -L AD_RULE_FORWARD 2>/dev/null|wc -l) -gt 0 ]
	do
		iptables -t nat -F AD_RULE_FORWARD
		iptables -t nat -X AD_RULE_FORWARD
	done
}

createRule(){
	createRuleIpset
	createRuleFile
	createRuleTable
}
destroyRule(){
	destroyRuleTable
	destroyRuleFile
	destroyRuleIpset
}

resetRule()
{
	destroyRule
	createRule
}

start(){
	[ $ENABLED -ne 1 ] && { echo "KoolProxy is off."; return 1; }

	[ $(ps|grep bin/kp/koolproxy|grep -Evc 'grep|/bin/sh') -ge 1 ] && { echo "KoolProxy already started."; return 1; }
	
	[ $FILTERMODE -eq 2 ] && { KPPARAM="-e"; }
	
	service_start $MIWIFIPATH/bin/kp/koolproxy -d -p $LOCALPORT $KPPARAM
	resetRule
	/etc/init.d/dnsmasq restart
}
stop(){
	service_stop $MIWIFIPATH/bin/kp/koolproxy
	killall -9 koolproxy
	destroyRule
	/etc/init.d/dnsmasq restart
}
reload(){
	[ $(ps|grep bin/kp/koolproxy|grep -Evc 'grep|/bin/sh') -ge 1 ]  && {
		resetRule;/etc/init.d/dnsmasq reload
		return 0
	} || {
		echo "KoolProxy is not running."
		return 1
	}
}